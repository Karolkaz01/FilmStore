@page "/AllRents"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Rents</PageTitle>

<h1>Rents</h1>

Sort:
<button class="btn btn-primary" @onclick="(() => SortByClientLastName())"> Nazwisko </button>
<button class="btn btn-primary" @onclick="(() => SortByRentDate())"> Data wypożyczenia</button>

<EditForm Model="filters" OnSubmit="Filter">
    <div>
        <label for="title">Nazwisko</label>
        <InputText id="title" @bind-Value="filters.ClientLastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="type">Tytuł</label>
        <InputText id="type" @bind-Value="filters.Title" class="form-control"></InputText>
    </div>
    <div>
        <label for="title">Data wypożyczenia</label>
        <InputDate id="title" @bind-Value="filters.RentDate" class="form-control"></InputDate>
    </div>
    <button type="submit" class="btn btn-primary m-3"> Filtruj </button>
</EditForm>

@if (rents == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var rent in rents)
        {
            <li class="media my-3 card">
                <div class="media-body m-3">
                    <h5>@rent.FilmTitle</h5>
                    <p> Imie i nazwisko : @rent.ClientFirstName @rent.ClientLastName </p>
                    <p> Data wypozyczenia: @rent.RentDate.ToString() </p>
                    <p> Planowana data zwrotu: @rent.PlanedReturnDate.ToString()</p>
                    @if (rent.ReturnDate != null)
                    {
                        <p> Data zwrotu: @rent.ReturnDate</p>
                    }
                    else
                    {
                        <p> Data zwrotu: <span style="color: red"> N/A </span></p>
                        <button class="btn btn-primary btn-danger" @onclick="(() => ReturnFilm(rent.Id))"> Zwróć </button>
                    }
                </div>
            </li>
        }
    </ul>
}

@code {
    private IEnumerable<RentedFilmDto>? rents;
    private RentFilterDto filters = new RentFilterDto();

    private IRentService _rentService;

    protected override async Task OnInitializedAsync()
    {
        _rentService = new RentService();
        rents = _rentService.GetAllRents();
    }

    public void Filter()
    {
        var allRents = _rentService.GetAllRents();

        if (!string.IsNullOrEmpty(filters.ClientLastName))
            allRents = allRents.Where(f => f.ClientLastName.ToLower().Contains(filters.ClientLastName.ToLower()));


        if (!string.IsNullOrEmpty(filters.Title))
            allRents = allRents.Where(f => f.FilmTitle.ToLower().Contains(filters.Title.ToLower()));

        if (filters.RentDate != new DateTime())
            allRents = allRents.Where(f => f.RentDate.ToString("yyyyMMdd").Equals(filters.RentDate.ToString("yyyyMMdd")));

        rents = allRents;
    }

    public void SortByClientLastName()
    {
        rents = _rentService.GetAllRents().OrderBy(r => r.ClientLastName);
    }

    public void SortByRentDate()
    {
        rents = _rentService.GetAllRents().OrderBy(r => r.RentDate);
    }

    public async void ReturnFilm(string id)
    {
        _rentService.ReturnFilm(id);
        Task.Delay(1000);
        _rentService.RefreshData();
        rents = _rentService.GetAllRents();
    }
}
